<?php

namespace AppBundle\Repository;

/**
 * PlacesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlacesRepository extends \Doctrine\ORM\EntityRepository
{
    public function topRated()
    {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
            ->select('c')
            ->from('AppBundle:Bewertung', 'c')
//            ->leftJoin('AppBundle:Bewertung', 'c', 'WITH', 'p.id = c.placesId')
            ->orderBy('c.placesId', 'ASC');

        $rating = $query->getQuery()->getArrayResult();

//        $ordered = array();
//        $oldRating = 0;
//        $oldId = "";
//        $quantity = 0;
//        for ($i = 0; $i < count($rating); $i++) {
//            if ($rating[$i]['placesId'] = $oldId) {
//                $ordered[$rating[$i]['placesId']] = ($rating[$i]['bewertungen'] + $oldRating);
//                $quantity = $quantity + 1;
//            } else {
//                $ordered[$oldId] = $ordered[$oldId] / $quantity;
//                $ordered[$rating[$i]['placesId']] = ($rating[$i]['bewertungen']);
//                $quantity = 0;
//            }
//            $oldRating = $rating[$i]['bewertungen'];
//            $oldId = $rating[$i]['placesId'];
//        }
//        print_r($ordered);

    }

    public function recommended()
    {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
            ->select('c')
            ->from('AppBundle:Bewertung', 'c')
//            ->leftJoin('AppBundle:Places', 'p', 'WITH', 'p.id = c.placesId')
            ->orderBy('c.placesId', 'ASC');

        $rating = $query->getQuery()->getArrayResult();

        $placesId = array();
        for ($i = 0; $i < count($rating); $i++) {
            $placesId[$i] = $rating[$i]['placesId'];
        }

        $values = array_count_values($placesId);
        arsort($values);
        $popular = array_slice(array_keys($values), 0, 5, true);

//        print_r($popular);

        $rec1 = $popular[0];
        $rec2 = $popular[1];
        $rec3 = $popular[2];

        $query2 = $em->createQueryBuilder()
            ->select('p')
            ->from('AppBundle:Places', 'p')
            ->leftJoin('AppBundle:Bewertung', 'c', 'WITH', 'p.id = c.placesId')
            ->where('c.placesId = :rec1')
            ->orWhere('c.placesId = :rec2')
            ->orWhere('c.placesId = :rec3')
            ->setParameter('rec1', $rec1)
            ->setParameter('rec2', $rec2)
            ->setParameter('rec3', $rec3);

        $places = $query2->getQuery()->getResult();

//        print_r($places);

        return $places;
    }
}
